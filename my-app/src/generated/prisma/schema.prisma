// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  username       String    @unique
  password       String
  email          String    @unique
  emailVerified  DateTime?
  profilePicture String? // URL to profile picture
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // NextAuth fields
  accounts Account[]
  sessions Session[]

  // Counts
  journalEntriesCount   Int @default(0)
  privateEntriesCount   Int @default(0)
  publicEntriesCount    Int @default(0)
  protectedEntriesCount Int @default(0)

  // Self-relation for friendships (directional access)
  friends   User[] @relation("UserFriends") // users this user has friended
  friendsOf User[] @relation("UserFriends") // users who have friended this user

  // Relations
  entries Entry[]
}

enum EntryType {
  FREEWRITE
  GUIDED
}

enum Visibility {
  PRIVATE
  PUBLIC
  PROTECTED
}

model Entry {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type       EntryType
  visibility Visibility @default(PRIVATE)

  // Optional free text content for the journal entry
  content String?

  // Day quality
  qualityScore Int? // 1-10; enforce in app or via custom SQL migration if desired
  qualityEmoji String? // store an emoji like "ðŸ™‚" (optional)

  // Media attachments (images/videos) as URLs
  mediaUrls String[] // Postgres text[]

  // Locations visited during the day; store as JSON array of objects
  // e.g., [{ lat: 40.1, lng: -88.2, name: "Campus", at: "2025-10-19T12:00:00Z" }]
  locations Json?

  // Normalized locations (preferred for querying)
  entryLocations EntryLocation[]

  // Health metrics
  stepsCount Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, createdAt(sort: Desc)])
}

// Normalized per-entry locations for better querying and indexing
model EntryLocation {
  id      String @id @default(cuid())
  entryId String
  entry   Entry  @relation(fields: [entryId], references: [id], onDelete: Cascade)

  // Coordinates (WGS84). Float maps to Postgres double precision.
  lat Float
  lng Float

  // Optional PostGIS geography point (requires migration to add the column and extension)
  coordinates Unsupported("geography")?

  // Optional metadata for maps integrations
  name      String?
  placeId   String? // e.g., Google Place ID or provider key
  visitedAt DateTime?
  sequence  Int? // order of visit within the day
  raw       Json? // optional raw provider payload

  createdAt DateTime @default(now())

  @@index([entryId])
  @@index([visitedAt])
  @@index([lat, lng])
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
